/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TangibleNFTInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FACTORY_ROLE()": FunctionFragment;
    "addApprovedBrand(string)": FunctionFragment;
    "adjustStorageAndGetAmount(uint256,uint256,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseSymbolURI()": FunctionFragment;
    "blackListedTokens(uint256)": FunctionFragment;
    "blacklistToken(uint256,bool)": FunctionFragment;
    "destroyTNFTs(uint256[],address)": FunctionFragment;
    "factory()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getApprovedBrands()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isStorageFeePaid(uint256)": FunctionFragment;
    "listTNFTsByVendor(uint128)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "paused()": FunctionFragment;
    "produceMultipleTNFTtoStock(uint128,uint256,address,string)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setBrand(uint256,string)": FunctionFragment;
    "setStoragePercentPricePerYear(uint256)": FunctionFragment;
    "setStoragePricePerYear(uint256)": FunctionFragment;
    "storageEndTime(uint256)": FunctionFragment;
    "storagePercentagePricePerYear()": FunctionFragment;
    "storagePriceFixed()": FunctionFragment;
    "storagePricePerYear()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleStorageFee(bool)": FunctionFragment;
    "tokenBrand(uint256)": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "vendorProducedTNFTs(uint128)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "FACTORY_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "addApprovedBrand", values: [string]): string;
  encodeFunctionData(
    functionFragment: "adjustStorageAndGetAmount",
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "approve", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseSymbolURI", values?: undefined): string;
  encodeFunctionData(functionFragment: "blackListedTokens", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "blacklistToken", values: [BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: "destroyTNFTs", values: [BigNumberish[], string]): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "getApproved", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getApprovedBrands", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: "isApprovedForAll", values: [string, string]): string;
  encodeFunctionData(functionFragment: "isStorageFeePaid", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "listTNFTsByVendor", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerOf", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "produceMultipleTNFTtoStock",
    values: [BigNumberish, BigNumberish, string, string],
  ): string;
  encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: "safeTransferFrom", values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "setApprovalForAll", values: [string, boolean]): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(functionFragment: "setBrand", values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: "setStoragePercentPricePerYear", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setStoragePricePerYear", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "storageEndTime", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "storagePercentagePricePerYear", values?: undefined): string;
  encodeFunctionData(functionFragment: "storagePriceFixed", values?: undefined): string;
  encodeFunctionData(functionFragment: "storagePricePerYear", values?: undefined): string;
  encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "toggleStorageFee", values: [boolean]): string;
  encodeFunctionData(functionFragment: "tokenBrand", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "tokenByIndex", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "tokenOfOwnerByIndex", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "tokenURI", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
  encodeFunctionData(functionFragment: "transferFrom", values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "vendorProducedTNFTs", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FACTORY_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addApprovedBrand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adjustStorageAndGetAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseSymbolURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blackListedTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blacklistToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroyTNFTs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getApproved", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getApprovedBrands", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isApprovedForAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStorageFeePaid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listTNFTsByVendor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "produceMultipleTNFTtoStock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeTransferFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setApprovalForAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBrand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStoragePercentPricePerYear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStoragePricePerYear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storageEndTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storagePercentagePricePerYear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storagePriceFixed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storagePricePerYear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toggleStorageFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenBrand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenByIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenOfOwnerByIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vendorProducedTNFTs", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Paused(address)": EventFragment;
    "ProducedTNFT(uint256)": EventFragment;
    "ProducedTNFTs(uint256[])": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StorageFeeToPay(uint256,uint256,uint256)": EventFragment;
    "StoragePercentagePricePerYearSet(uint256,uint256)": EventFragment;
    "StoragePricePerYearSet(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProducedTNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProducedTNFTs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StorageFeeToPay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoragePercentagePricePerYearSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoragePricePerYearSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type ProducedTNFTEvent = TypedEvent<[BigNumber], { tokenId: BigNumber }>;

export type ProducedTNFTEventFilter = TypedEventFilter<ProducedTNFTEvent>;

export type ProducedTNFTsEvent = TypedEvent<[BigNumber[]], { tokenId: BigNumber[] }>;

export type ProducedTNFTsEventFilter = TypedEventFilter<ProducedTNFTsEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<[string, string, string], { role: string; account: string; sender: string }>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<[string, string, string], { role: string; account: string; sender: string }>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type StorageFeeToPayEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { tokenId: BigNumber; _years: BigNumber; amount: BigNumber }
>;

export type StorageFeeToPayEventFilter = TypedEventFilter<StorageFeeToPayEvent>;

export type StoragePercentagePricePerYearSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldPercentage: BigNumber; newPercentage: BigNumber }
>;

export type StoragePercentagePricePerYearSetEventFilter = TypedEventFilter<StoragePercentagePricePerYearSetEvent>;

export type StoragePricePerYearSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldPrice: BigNumber; newPrice: BigNumber }
>;

export type StoragePricePerYearSetEventFilter = TypedEventFilter<StoragePricePerYearSetEvent>;

export type TransferEvent = TypedEvent<[string, string, BigNumber], { from: string; to: string; tokenId: BigNumber }>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface TangibleNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TangibleNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FACTORY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addApprovedBrand(
      brand: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    adjustStorageAndGetAmount(
      tokenId: BigNumberish,
      _years: BigNumberish,
      tokenPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseSymbolURI(overrides?: CallOverrides): Promise<[string]>;

    blackListedTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    blacklistToken(
      tokenId: BigNumberish,
      blacklisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    destroyTNFTs(
      tokenIds: BigNumberish[],
      burningFrom: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getApprovedBrands(overrides?: CallOverrides): Promise<[string[]]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedForAll(account: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    isStorageFeePaid(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    listTNFTsByVendor(vendorId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    produceMultipleTNFTtoStock(
      vendorId: BigNumberish,
      count: BigNumberish,
      toStock: string,
      brandName: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBaseURI(uri: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setBrand(
      tokenId: BigNumberish,
      brand: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStoragePercentPricePerYear(
      _storagePercentagePricePerYear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStoragePricePerYear(
      _storagePricePerYear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    storageEndTime(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    storagePercentagePricePerYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    storagePriceFixed(overrides?: CallOverrides): Promise<[boolean]>;

    storagePricePerYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleStorageFee(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tokenBrand(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    vendorProducedTNFTs(vendorId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FACTORY_ROLE(overrides?: CallOverrides): Promise<string>;

  addApprovedBrand(
    brand: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  adjustStorageAndGetAmount(
    tokenId: BigNumberish,
    _years: BigNumberish,
    tokenPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseSymbolURI(overrides?: CallOverrides): Promise<string>;

  blackListedTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  blacklistToken(
    tokenId: BigNumberish,
    blacklisted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  destroyTNFTs(
    tokenIds: BigNumberish[],
    burningFrom: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getApprovedBrands(overrides?: CallOverrides): Promise<string[]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(account: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

  isStorageFeePaid(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  listTNFTsByVendor(vendorId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  produceMultipleTNFTtoStock(
    vendorId: BigNumberish,
    count: BigNumberish,
    toStock: string,
    brandName: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBaseURI(uri: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setBrand(
    tokenId: BigNumberish,
    brand: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStoragePercentPricePerYear(
    _storagePercentagePricePerYear: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStoragePricePerYear(
    _storagePricePerYear: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  storageEndTime(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  storagePercentagePricePerYear(overrides?: CallOverrides): Promise<BigNumber>;

  storagePriceFixed(overrides?: CallOverrides): Promise<boolean>;

  storagePricePerYear(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleStorageFee(
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tokenBrand(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  vendorProducedTNFTs(vendorId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FACTORY_ROLE(overrides?: CallOverrides): Promise<string>;

    addApprovedBrand(brand: string, overrides?: CallOverrides): Promise<void>;

    adjustStorageAndGetAmount(
      tokenId: BigNumberish,
      _years: BigNumberish,
      tokenPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseSymbolURI(overrides?: CallOverrides): Promise<string>;

    blackListedTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    blacklistToken(tokenId: BigNumberish, blacklisted: boolean, overrides?: CallOverrides): Promise<void>;

    destroyTNFTs(tokenIds: BigNumberish[], burningFrom: string, overrides?: CallOverrides): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getApprovedBrands(overrides?: CallOverrides): Promise<string[]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(account: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

    isStorageFeePaid(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    listTNFTsByVendor(vendorId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    produceMultipleTNFTtoStock(
      vendorId: BigNumberish,
      count: BigNumberish,
      toStock: string,
      brandName: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(operator: string, approved: boolean, overrides?: CallOverrides): Promise<void>;

    setBaseURI(uri: string, overrides?: CallOverrides): Promise<void>;

    setBrand(tokenId: BigNumberish, brand: string, overrides?: CallOverrides): Promise<void>;

    setStoragePercentPricePerYear(
      _storagePercentagePricePerYear: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setStoragePricePerYear(_storagePricePerYear: BigNumberish, overrides?: CallOverrides): Promise<void>;

    storageEndTime(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    storagePercentagePricePerYear(overrides?: CallOverrides): Promise<BigNumber>;

    storagePriceFixed(overrides?: CallOverrides): Promise<boolean>;

    storagePricePerYear(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleStorageFee(value: boolean, overrides?: CallOverrides): Promise<void>;

    tokenBrand(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(from: string, to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    vendorProducedTNFTs(vendorId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, approved?: string | null, tokenId?: BigNumberish | null): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(owner?: string | null, operator?: string | null, approved?: null): ApprovalForAllEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ProducedTNFT(uint256)"(tokenId?: null): ProducedTNFTEventFilter;
    ProducedTNFT(tokenId?: null): ProducedTNFTEventFilter;

    "ProducedTNFTs(uint256[])"(tokenId?: null): ProducedTNFTsEventFilter;
    ProducedTNFTs(tokenId?: null): ProducedTNFTsEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;

    "StorageFeeToPay(uint256,uint256,uint256)"(
      tokenId?: BigNumberish | null,
      _years?: null,
      amount?: null,
    ): StorageFeeToPayEventFilter;
    StorageFeeToPay(tokenId?: BigNumberish | null, _years?: null, amount?: null): StorageFeeToPayEventFilter;

    "StoragePercentagePricePerYearSet(uint256,uint256)"(
      oldPercentage?: null,
      newPercentage?: null,
    ): StoragePercentagePricePerYearSetEventFilter;
    StoragePercentagePricePerYearSet(
      oldPercentage?: null,
      newPercentage?: null,
    ): StoragePercentagePricePerYearSetEventFilter;

    "StoragePricePerYearSet(uint256,uint256)"(oldPrice?: null, newPrice?: null): StoragePricePerYearSetEventFilter;
    StoragePricePerYearSet(oldPrice?: null, newPrice?: null): StoragePricePerYearSetEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null,
    ): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, tokenId?: BigNumberish | null): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FACTORY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addApprovedBrand(brand: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    adjustStorageAndGetAmount(
      tokenId: BigNumberish,
      _years: BigNumberish,
      tokenPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseSymbolURI(overrides?: CallOverrides): Promise<BigNumber>;

    blackListedTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistToken(
      tokenId: BigNumberish,
      blacklisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    destroyTNFTs(
      tokenIds: BigNumberish[],
      burningFrom: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getApprovedBrands(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(account: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    isStorageFeePaid(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    listTNFTsByVendor(vendorId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    produceMultipleTNFTtoStock(
      vendorId: BigNumberish,
      count: BigNumberish,
      toStock: string,
      brandName: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setBaseURI(uri: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setBrand(
      tokenId: BigNumberish,
      brand: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setStoragePercentPricePerYear(
      _storagePercentagePricePerYear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setStoragePricePerYear(
      _storagePricePerYear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    storageEndTime(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    storagePercentagePricePerYear(overrides?: CallOverrides): Promise<BigNumber>;

    storagePriceFixed(overrides?: CallOverrides): Promise<BigNumber>;

    storagePricePerYear(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleStorageFee(value: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    tokenBrand(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    vendorProducedTNFTs(vendorId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FACTORY_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addApprovedBrand(
      brand: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    adjustStorageAndGetAmount(
      tokenId: BigNumberish,
      _years: BigNumberish,
      tokenPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseSymbolURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blackListedTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blacklistToken(
      tokenId: BigNumberish,
      blacklisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    destroyTNFTs(
      tokenIds: BigNumberish[],
      burningFrom: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApprovedBrands(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(account: string, operator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStorageFeePaid(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listTNFTsByVendor(vendorId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    produceMultipleTNFTtoStock(
      vendorId: BigNumberish,
      count: BigNumberish,
      toStock: string,
      brandName: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBaseURI(uri: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setBrand(
      tokenId: BigNumberish,
      brand: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStoragePercentPricePerYear(
      _storagePercentagePricePerYear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStoragePricePerYear(
      _storagePricePerYear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    storageEndTime(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    storagePercentagePricePerYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    storagePriceFixed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    storagePricePerYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleStorageFee(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tokenBrand(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    vendorProducedTNFTs(vendorId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
